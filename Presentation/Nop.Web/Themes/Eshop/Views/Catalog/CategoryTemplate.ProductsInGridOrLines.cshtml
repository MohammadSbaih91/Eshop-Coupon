@model CategoryModel
@using Nop.Core
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IWorkContext workContext
@{
    Layout = "_ColumnsTwo";
    string viewMode;
    var categoryViewMode = string.Empty;
    if (Model.PagingFilteringContext.ViewMode == "grid")
    {
        viewMode = "product-grid";
    }

    else if (Model.PagingFilteringContext.ViewMode == "grid2")
    {
        viewMode = "product-grid-2";
        categoryViewMode = viewMode;
    }
    else
    {
        viewMode = "product-list";
    }
    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = UrlStrucutre.UrlDecode(Url.RouteUrl("Category", new {SeName = Model.SeName}, webHelper.CurrentRequestProtocol).ToLowerInvariant());
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
    //    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
    var breadcrumbDelimiter = Html.Raw("<i class=\"fas fa-angle-right\"></i>");

    var url = webHelper.GetThisPageUrl(true);
    var issmartlife = url.Contains("smart-life");
}
@*category breadcrumb*@

@section Breadcrumb
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                <li>
                    <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                    <span class="delimiter">
                        @breadcrumbDelimiter
                    </span>
                </li>
                @{ int position = 1; }
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                        @if (isLastCategory)
                        {
                            <strong class="current-item" itemprop="name">@cat.Name</strong>
                            <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                                <link itemprop="url" href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Category", new {SeName = cat.SeName}))"/>
                            </span>
                        }
                        else
                        {
                            <a href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Category", new {SeName = cat.SeName}))" title="@cat.Name" itemprop="item">
                                <span itemprop="name">@cat.Name</span>
                            </a>
                            <span class="delimiter">
                                @breadcrumbDelimiter
                            </span>
                        }
                        <meta itemprop="position" content="@position"/>
                    </li>
                    position++;
                }
            </ul>
        </div>
        @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model})
    }
}

@section left{
    @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnBefore})
    @await Component.InvokeAsync("CategoryNavigation", new {currentCategoryId = currentCategoryId, currentProductId = currentProductId})
    @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation})
    @await Component.InvokeAsync("ManufacturerNavigation", new {currentManufacturerId = currentManufacturerId})
    @await Component.InvokeAsync("VendorNavigation")
    @await Component.InvokeAsync("PopularProductTags")
    @await Component.InvokeAsync("PollBlock", new {systemKeyword = "LeftColumnPoll"})
    @await Component.InvokeAsync("Widget", new {widgetZone = PublicWidgetZones.LeftSideColumnAfter})
}

<div class="page category-page">
    @if (Model.Products.Count > 0)
    {
        @await Component.InvokeAsync("CategoryFilter", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
        @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
    }
    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
        @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
    }
    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
    {
        @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
    }
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="page-body">
        @if (issmartlife)
        {
            <div style="width:100%;display:flex;justify-content:center;background:black;margin:15px 0;">
                @*<video id="orange-video" autoplay muted="false" style="width:100%;">
                    <source src="~/images/SmartLifePlugdevice.mp4" type="video/mp4">
                </video>*@
                <video id="orange-cat-video" controls autoplay muted style="width:100%;">
                    <source src="~/images/SmartLifePlugdevice.mp4" type="video/mp4">
                </video>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="category-grid sub-category-grid @categoryViewMode">
                <div class="item-grid">
                    @foreach (var item in Model.SubCategories)
                    {
                        <div class="item-box">
                            <div class="sub-category-item">
                                <h2 class="title">
                                    <a href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Category", new {SeName = item.SeName}))" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </h2>
                                <div class="picture">
                                    <a href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Category", new {SeName = item.SeName}))" title="@item.PictureModel.Title">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid @viewMode">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="item-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })


        @if (Model.Products.Count > 0)
        {
            <div class="@viewMode">
                <div class="item-grid">
                    @foreach (var product in Model.Products)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", product)
                        </div>
                    }
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
        @await Html.PartialAsync($"_static.shopwithconfident.{workContext.WorkingLanguage.UniqueSeoCode}")
    </div>
</div>