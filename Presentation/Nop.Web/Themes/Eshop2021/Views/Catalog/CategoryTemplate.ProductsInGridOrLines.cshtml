@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Web.Framework.UI
@using Nop.Services.Helpers


@inject IWorkContext workContext
@inject IUserAgentHelper userAgentHelper

@inject IWorkContext workContext
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject CatalogSettings  catalogSettings

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page productbox-diff slider-mask ajax-left-filter common-catalog");

    Html.AppendPageCssClassParts("breadcrumb-black");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
    var firstBreadc = Model.CategoryBreadcrumb.FirstOrDefault();
}

@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <partial name="_CategoryBreadcrumb" model="Model.CategoryBreadcrumb" />
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}

<div class="widget-zone">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
</div>

<div class="cat-transfer">
    
    <div class="container">
        <div class="page-title page-title-catalog">
            <h1>@Model.Name</h1>
            
         
            @if (!userAgentHelper.IsMobileDevice())
            {
                <div class="other-link">
                    <ul>
                        <li><a href="/eshop-promotions"><i class="cir"></i><span>@T("HomePage.Category.Promotions")</span></a></li>
                        <li class="best-seller-icon">
                            <div class="dropdown">
                                <div class="dropdown-toggle" id="catadropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="cir"></i><span>@T("HomePage.Category.BestSeller")</span>
                                </div>
                                <div class="dropdown-menu" aria-labelledby="catadropdownMenuButton" id="bestsellerlist-@(Model.Id)">
                                    @*Add filter list by json*@
                                </div>
                            </div>
                        </li>
                        <li class="compare-icon"><a href="/compareproducts"><i class="cir"></i><span>@T("HomePage.Category.Compare")</span></a></li>
                    </ul>
                </div>
            }
            <div class="category-desc-filter" >@Html.Raw(Model.Description)</div>
            
            <div class="cata-filter-icon catalog-drawer">@T("CatalogPage.Filter")</div>
            <div class="clearfix"></div>
        </div>

        @if (userAgentHelper.IsMobileDevice())
        {
            <div class="for-mobile">
                <div class="other-link">
                    <ul>
                        <li><a href="/eshop-promotions"><i class="cir"></i><span>@T("HomePage.Category.Promotions")</span></a></li>
                        <li class="best-seller-icon">
                            <div class="dropdown">
                                <div class="dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="cir"></i><span>@T("HomePage.Category.BestSeller")</span>
                                </div>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="bestsellerlist-@(Model.Id)">
                                    @*Add filter list by json*@
                                </div>
                            </div>
                        </li>
                        <li class="compare-icon"><a href="/compareproducts"><i class="cir"></i><span>@T("HomePage.Category.Compare")</span></a></li>
                    </ul>
                </div>
                <div class="clearfix"></div>
            </div>
        }

    </div>
</div>
@await Component.InvokeAsync("PackagesList", new { categoryId = Model.Id })
<script asp-location="Footer">
    $(document).ready(function () {

        $(".widget-zone").insertBefore('.column-two-zone');
        $(".cat-transfer").insertBefore('.column-res');

        var onClickShowCatalog = function () {
            $('body').toggleClass("scroll-lock");
            $('.side-2', '.html-category-page').toggleClass('active');
        };
        $(".catalog-drawer").click(onClickShowCatalog);


        $('input:radio[name=OfferRadioInline]').change(function () {
            var url = updateQueryStringParameter('ofr', this.value)
            CatalogFilterProduct(url);
        });

        CatalogFilterProduct();
    });
    function CatalogFilterProduct(url = window.location.href, loadMore = false) {
        var manufacturerId = Number(GetQueryStringParameter('mId', url));
        $("#load-more-btn").hide();
        var pageIndex = Number(GetQueryStringParameter('pi'));
        if (!loadMore) {
            if (pageIndex > 0) {
                pageIndex = 0;
                url = updateQueryStringParameter('pi', pageIndex, url)
            }
        }

        if (url !== '') {
            if (typeof (history.pushState) != "undefined") {
                var obj = { Page: "catalog", Url: url };
                history.replaceState(obj, obj.Page, obj.Url);
            } else {
                alert("Browser does not support HTML5.");
            }
        }

        var postData = {
            categoryId: @(Model.Id),
            loadmore: loadMore
        };

        if (!loadMore) {
            $("#catalog-filter-product").html('<div id="tmpLoader" class="col-md-12"><div class="ajax-loading-productload" style=""></div></div>');
        } else {
            $("#catalog-filter-product").append('<div id="tmpLoader" class="col-md-12"><div class="ajax-loading-productload" style=""></div></div>');
        }

        addAntiForgeryToken(postData);
        $.ajax({
            cache: false,
            type: "POST",
            url: "/CustomProduct/CatalogFilterProduct",
            data: postData,
            dataType: 'json',
            success: function (response) {
                if (loadMore) {
                    $("#tmpLoader").remove();
                    $("#catalog-filter-product").append(response.html);
                }
                else {
                    $("#catalog-filter-product").html(response.html);
                    $("#bestsellerlist-@(Model.Id)").html(response.filterhtml);
                    $("#ProductSpecificationAttribureFilter").html(response.specFilter);

                    SelectedBrand(manufacturerId);

                    if (manufacturerId === 0) {
                        $("#manufacturerBox").show();
                    }
                    else {
                        $("#manufacturerBox").hide();
                    }
                    $('.block .cust-filter-title').on('click', function () {
                        $(this).toggleClass("active");
                        $(this).siblings('.listbox').slideToggle('slow');
                    });
                }
                if (response.hideLoadMore) {
                    $("#load-more-btn").hide();
                } else {
                    $("#load-more-btn").show();
                }
            },
            failure: function (response) {
                alert(response);
                $("#catalog-filter-product").html('');
            }
        });
    }

    function LoadMoreProduct() {
        var pageIndex = Number(GetQueryStringParameter('pi'));
        if (pageIndex === 0) {
            pageIndex = 1
        }
        pageIndex = pageIndex + 1;
        var url = updateQueryStringParameter('pi', pageIndex)
        CatalogFilterProduct(url, true)
    }

    function CatalogManufactureFilter(manufacturerId = 0) {
        var url = updateQueryStringParameter('mId', manufacturerId)
        CatalogFilterProduct(url);
    }

    function SelectedBrand(manufacturerId) {
        if ($(".brand-selector")) {
            var spa = $("#selected-" + manufacturerId).attr("data-attr");
            $("#dropdownBrand").text(spa);
        }
    }

    function updateQueryStringParameter(key, value, uri = window.location.href) {
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            return uri + separator + key + "=" + value;
        }
    }

    function GetQueryStringParameter(name, uri = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(uri);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

</script>

<div class="page category-page">

    <div class="brand-list">
        @await Component.InvokeAsync("CustomManufacturerNavigation", new { categoryid = Model.Id })
        <div class="clearfix"></div>
    </div>

    <div class="page-body">
        <input type="hidden" value="0" id="hidProductTag" />
        <input type="hidden" value="" id="hidPriceRange" />
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>

        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @*@if (Model.SubCategories.Count > 0)
            {
                <div class="category-grid sub-category-grid">
                    <div class="item-grid">
                        <div class="row">
                            @foreach (var item in Model.SubCategories)
                            {
                                <div class="item-box col-md-4 col-sm-6">
                                    <div class="sub-category-item">
                                        <h2 class="title">
                                            <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                                @item.Name
                                            </a>
                                        </h2>
                                        <div class="picture">
                                            <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                                <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @*@if (Model.FeaturedProducts.Count > 0)
            {
                <div class="product-grid featured-product-grid">
                    <div class="title">
                        <strong>@T("Products.FeaturedProducts")</strong>
                    </div>
                    <div class="item-grid">
                        <div class="row">
                            @foreach (var item in Model.FeaturedProducts)
                            {
                                <div class="item-box col-md-4 col-sm-6">
                                    @await Html.PartialAsync("_ProductBox", item)
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @*@if (Model.Products.Count > 0)
            {
                @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
        <!--<div class="product-filters">-->
        @*filtering*@
        <!--@if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
        {
            @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
        }-->
        @*filtering*@
        <!--@if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
            }
        </div>-->
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })

            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="item-grid resp-row">
                    <div id="catalog-filter-product" class="row">
                        @*Load Product by jquery*@
                    </div>
                </div>
            </div>
            <div class="load-more-btn text-center" id="load-more-btn">
                <input type="hidden" id="pageindex" value="1" />
                <div class="btn btn-outline-dark" onclick="LoadMoreProduct()">@T("HomePage.Catalog.LoadMore")</div>
            </div>
            @*@if (Model.Products.Count > 0)
                {
                    <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                        <div class="item-grid">
                            <div id="catalog-filter-product" class="row">
                                @await Html.PartialAsync("_ProductsInGridOrLines_Product", Model.Products)
                            </div>
                        </div>
                    </div>
                    <div class="load-more-btn text-center" id="load-more-btn">
                        <input type="hidden" id="pageindex" value="1" />
                        <div class="btn btn-outline-dark" onclick="LoadMoreProduct()">Load More</div>
                    </div>
                }*@

            @*@{
                    var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                }
                @if (!pager.IsEmpty())
                {
                    <div class="pager">
                        @pager
                    </div>
                }*@
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
        </div>
    </div>
