@using Nop.Services.Helpers
@inject IUserAgentHelper userAgentHelper
@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}
@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}
<div class="column-two-zone">
    <div class="container column-res">
        <div class="row">
            <div class="col-lg-3">
                <div class="side-2">

                    <div class="filter-title">
                        <h3>@T("CatalogPage.Filter")</h3>
                        <div class="close-catalog-filter catalog-drawer"></div>
                        <div class="clearfix"></div>
                    </div>

                    @if (IsSectionDefined("left"))
                    {
                        @RenderSection("left")
                    }
                    else
                    {
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
                        @*@await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })*@
                        @await Component.InvokeAsync("CustomCategoryNavigation", new { currentCategoryId = currentCategoryId })
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                        @*@await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })*@
                        @await Component.InvokeAsync("VendorNavigation")
                        @*@await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })*@
                        @*@await Component.InvokeAsync("PopularProductTags")*@
                        @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })

                        <div class="block block-price-navigation" id="price-range-filter">
                            @await Component.InvokeAsync("CustomPriceRange", new { currentCategoryId = currentCategoryId })
                        </div>
                        <div class="clearfix"></div>
                        <div id="ProductSpecificationAttribureFilter" class="prd-specification-attr-filter">
                            @*@await Html.PartialAsync("_ProductSpecificationAttribureFilter");*@
                        </div>


                        <div class="block block-radio-navigation">
                            <div class="title @(userAgentHelper.IsMobileDevice() ? "de-active" : "")">
                                <strong>@T("CatalogPage.Offer")</strong>
                            </div>
                            <div class="listbox" @(userAgentHelper.IsMobileDevice() ? "style=display:none;" : "")>
                                <ul class="list">
                                    <li>
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <input type="radio" value="1" id="customRadioInline1" name="OfferRadioInline" class="custom-control-input">
                                            <label class="custom-control-label" for="customRadioInline1"><span>@T("CatalogPage.Offer.New")</span></label>
                                        </div>
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <input type="radio" value="2" id="customRadioInline2" name="OfferRadioInline" class="custom-control-input">
                                            <label class="custom-control-label" for="customRadioInline2">@T("CatalogPage.Offer.OnSale")</label>
                                        </div>
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <input type="radio" value="3" id="customRadioInline3" name="OfferRadioInline" class="custom-control-input">
                                            <label class="custom-control-label" for="customRadioInline3">@T("CatalogPage.Offer.SpecialOffer")</label>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <script asp-location="Footer">
                            $(document).ready(function () {
                                $('.block .title').on('click', function () {
                                    //var e = window, a = 'inner';
                                    //if (!('innerWidth' in window)) {
                                    //    a = 'client';
                                    //    e = document.documentElement || document.body;
                                    //}
                                    //var result = { width: e[a + 'Width'], height: e[a + 'Height'] };
                                    //if (result.width < 1001) {

                                    //}
                                    $(this).toggleClass("de-active");
                                    $(this).siblings('.listbox').slideToggle('slow');
                                });
                            });
                        </script>

                    }
                </div>
            </div>
            <div class="col-lg-9">
                <div class="center-2">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
                    @RenderBody()
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
                </div>
            </div>
        </div>
    </div>
</div>
<script asp-location="Footer">
    $(document).ready(function () {
        $(".category-sub").on("click", function () {
            $(this).toggleClass("de-active");
            $(this).siblings('.sublist').slideToggle();
        });
    });
</script>