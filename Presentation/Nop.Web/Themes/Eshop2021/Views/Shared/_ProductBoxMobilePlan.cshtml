
@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var taxTooltip = workContext.TaxDisplayType == TaxDisplayType.IncludingTax ? T("HomePage.ProductBox.IncludingTax") : T("HomePage.ProductBox.ExcludingTax");

    var producturl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }));
}
<div class="product-item" data-productid="@Model.Id">
    <div class="product-top">
        <div class="picture no-margin-picture">
            <a href="@producturl" title="@Model.DefaultPictureModel.Title">
                <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
            </a>
        </div>
        
         
       
        @if (Model.OneMonthDiscount)
        {
               <div class="offerTitle titleMaxwidth">
        <a class="product-title" href="@producturl" title="@Model.Name">@Model.Name</a>
        </div>

            <div class="divonemonthdiscount"> <span>@Html.Raw(Model.DiscountDesc) </span></div>
        }
         else
        {
          <div class="offerTitle">
        <a class="product-title" href="@producturl" title="@Model.Name">@Model.Name</a>    
        </div> 
        
        }
        <div class="triangle-up"></div>
    </div>
    <div class="details">
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }

        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })

        <div class="prices internetprices">
            <div class="prices-flex">
              
                <div class="prices-group">
                    <div class="start-form">@T("HomePage.ProductBox.StartForm")</div>
                    <div class="prices-list">
                        <div class="pricesection">
                      
                           <span class="price actual-price"> @Html.Raw(EShopHelper.GetPriceFormatting(Model.PriceWithoutDiscount)) <span class="pad-top15 startFormMonth">/ @T("HomePage.ProductBox.StartFormMonth")</span></span> 
                        
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                <span class="price old-price">@Html.Raw(Model.ProductPrice.OldPrice) <span class="pad-top15 startFormMonth">/ @T("HomePage.ProductBox.StartFormMonth")</span></span>
                            }
                           
                            </div>

                            <div class="price_with_tax">
                                @if (Model.TaxRate != 0)
                            {
                                     <div class="tooltip-check" data-toggle="tooltip" data-placement="bottom" title="@(taxTooltip)">
                                        </div>
                                <span>@T("homepage.productbox.withtax")</span>
                                  <span class="price">  @Html.Raw(Model.ProductPrice.Price) <span class="pad-top15 startFormMonth">/ @T("HomePage.ProductBox.StartFormMonth")</span> </span> 
                            }
                    </div>
                    </div>
                </div>
            </div>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        <div class="add-info">            
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons">
                @*<button type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button btn btn-primary btn-block text-left lg" onclick="setLocation('@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }))')">@T("HomePage.ProductBox.ViewOffers")<i class="fas fa-chevron-right"></i></button>*@
                <a value="@T("Products.Details")" class="button-1 product-box-detail-button btn btn-primary btn-block text-left lg flex-v @(Model.IsOutOfStock && Model.ManageInventoryMethod ? "bt-disabled" : "")" href="@producturl">@T("HomePage.ProductBox.ViewOffers")<i class="fas fa-chevron-right"></i></a>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
