@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Catalog
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IManufacturerService manufacturerService
@{
    var productColorAttributes = Model.ProductAttributeOverviewModels.Where(p => p.AttributeControlType == AttributeControlType.ColorSquares).FirstOrDefault();

    var manufacturer = manufacturerService.GetProductManufacturersByProductId(Model.Id).FirstOrDefault();
    var manufacturerName = "";
    if (manufacturer != null && manufacturer.Manufacturer != null)
    {
        manufacturerName = manufacturer.Manufacturer.Name;
    }


    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var color = Model.SpecificationAttributeModels;

    var producturl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }));
}

<nop-antiforgery-token />
<div class="product-item device-title" data-productid="@Model.Id">
    @if (Model.MarkAsNew)
    {
        <div class="new-label"></div>
    }
    @if (Model.IsOutOfStock)
    {
        <div class="out-of-stock-label"></div>
    }

    <div class="picture">
        <a href="@producturl" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>

          @if (Model.SpecialPromotion)
        {
           <div class="div-SpecialPromotion"><span>@Html.Raw(Model.SpecialPromotionDesc) </span></div> 
        }
        <div class="color-available">
            @if (productColorAttributes != null)
            {
                <ul>
                    @foreach (var item in productColorAttributes.Values)
                    {
                        <li style="background:@(item.ColorSquaresRgb);"></li>
                    }
                </ul>
            }
        </div>
    </div>
    <div class="details">
        <div class="prd-brand-name">
            @if (!string.IsNullOrEmpty(manufacturerName))
            {
                <div class="brand-name">@manufacturerName</div>
            }
            else
            {
                <div class="brand-name">&nbsp;</div>
            }
            <a title="@Model.Name" class="product-title" href="@producturl">@Model.Name</a>
       
        
            @if (Model.SpecialPromotion)
        {
           <div class="div-SpecialPromotion"><img class="specialpromotion" src="/Themes/Eshop2021/Content/images/SpecialPromotion-tag.svg" /> <span>@Html.Raw(Model.SpecialPromotionDesc) </span></div> 
        }
        </div>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        <div class="rev-height">
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                var ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                    <div class="rating-count">(@Model.ReviewOverviewModel.TotalReviews)</div>
                </div>
            }
        </div>

        <div class="view-and-compare">
            <a value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@producturl', event)"><span>@T("HomePage.ProductBox.ViewDetails")</span><i class="fas fa-chevron-right"></i></a>
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <a value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 compare-button" onclick="fnCheckProductWhileAddToCompare(@(Model.Id),'@(addtocomparelink)',event)"><span>@T("HomePage.Category.Compare")</span><i></i></a>
            }
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        <div class="prices">
            <div class="prices-flex">
                <div class="prices-list">
                    @*TODO #start : this if section for price is temporary, after launch fix right solution and remove it *@
                    @if (Model.ProductPrice.PriceValue == 0)
                    {
                        <span class="price actual-price">@await Html.PartialAsync("_ProductDevicePriceFromAttribute")</span>
                    }
                    else
                    {
                        <span class="price actual-price">@Html.Raw(EShopHelper.GetPriceFormatting(Model.ProductPrice.Price))</span>
                    }
                    @*TODO #end : this if section for price is temporary, after launch fix right solution and remove it *@
                    
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Html.Raw(Model.ProductPrice.OldPrice)</span>
                    }
                </div>
            </div>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons">
                <button type="button" class="button-1 btn btn-primary btn-block text-left lg plus-icon" id="btnplanWithProduct_@(Model.Id)" onclick="productTemplate.fnProductDevice('@(Model.ProductPrice.Price)', @(Model.ProductPrice.PriceValue), @(Model.Id))">@Model.ButtonName</button>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
