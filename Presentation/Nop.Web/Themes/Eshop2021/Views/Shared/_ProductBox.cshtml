@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Catalog
@using Nop.Services.Localization
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IManufacturerService manufacturerService
@inject ILocalizationService localizationService
@{
    var productColorAttributes = Model.ProductAttributeOverviewModels.Where(p => p.AttributeControlType == AttributeControlType.ColorSquares).FirstOrDefault();

    var manufacturer = manufacturerService.GetProductManufacturersByProductId(Model.Id).FirstOrDefault();
    var manufacturerName = "";
    if (manufacturer != null && manufacturer.Manufacturer != null)
    {
        manufacturerName = localizationService.GetLocalized(manufacturer.Manufacturer, x => x.Name);
    }

    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var buyNow = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = true });

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var color = Model.SpecificationAttributeModels;

    var producturl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }));
}

<nop-antiforgery-token />
<div class="product-item device-title" data-productid="@Model.Id">
    @if (Model.MarkAsNew)
    {
        <div class="new-label"></div>
    }
    @if (Model.IsOutOfStock)
    {
        <div class="out-of-stock-label"></div>
    }
    <div class="remove-item" onclick="setLocation('@Url.RouteUrl("RemoveProductFromCompareList", new {productId = Model.Id})')"><i></i></div>
    <div class="picture">
        <a href="@producturl" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
        <div class="color-available">
            @if (productColorAttributes != null)
            {
                <ul>
                    @foreach (var item in productColorAttributes.Values)
                    {
                        <li style="background:@(item.ColorSquaresRgb);"></li>
                    }
                    @*<li></li>
                        <li style="background:#707070;"></li>
                        <li style="background:#000000;"></li>*@
                </ul>
            }
        </div>

         @if (Model.SpecialPromotion)
        {
           <div class="div-SpecialPromotion"><span>@Html.Raw(Model.SpecialPromotionDesc) </span></div> 
        }
    </div>
    <div class="details">
        <div class="prd-brand-name">
            @if (!string.IsNullOrEmpty(manufacturerName))
            {
                <div class="brand-name">@manufacturerName</div>
            }
            else
            {
                <div class="brand-name">&nbsp;</div>
            }
            
            <a class="product-title" href="@producturl" title="@Model.Name">@Model.Name</a>
        </div>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        <div class="rev-height">
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                var ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-review-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                    <div class="rating-count">(@Model.ReviewOverviewModel.TotalReviews)</div>
                </div>
            }
        </div>

        <div class="view-and-compare">
            <a value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@producturl',event)"><span>@T("HomePage.ProductBox.ViewDetails")</span><i class="fas fa-chevron-right"></i></a>
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <a value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 compare-button" onclick="fnCheckProductWhileAddToCompare(@(Model.Id),'@(addtocomparelink)',event)"><span>@T("HomePage.Category.Compare")</span><i></i></a>

            }
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        <div class="prices">
            <div class="prices-flex">
                <div class="prices-list">
                    @*TODO #start : this if section for price is temporary, after launch fix right solution and remove it *@
                    @if (Model.ProductPrice.PriceValue == 0)
                    {
                        <span class="price actual-price">
                            @await Html.PartialAsync("_ProductDevicePriceFromAttribute")
                            <span class="pad-top15 startFormMonth" id="productBoxMonth"> / @T("HomePage.ProductBox.StartFormMonth")</span>
                        </span>
                    }
                    else
                    {
                        <span class="price actual-price">
                            @Html.Raw(EShopHelper.GetPriceFormatting(Model.ProductPrice.Price))
                            <span class="pad-top15 startFormMonth" id="productBoxMonth"> / @T("HomePage.ProductBox.StartFormMonth")</span>
                        </span>
                    }
                    @*TODO #end : this if section for price is temporary, after launch fix right solution and remove it *@

                    @*<span class="price actual-price">@Html.Raw(EShopHelper.GetPriceFormatting(Model.ProductPrice.Price)) <span class="pad-top15 startFormMonth" id="productBoxMonth">/@T("HomePage.ProductBox.StartFormMonth")</span></span>*@
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Html.Raw(Model.ProductPrice.OldPrice)</span>
                    }
                </div>
            </div>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons add-to-cartbutton">
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.BuyNow").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    @*<button type="button" value="@(addToCartText)" class="btn btn-primary btn btn-block lg" onclick="setLocation('@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }))')">@(addToCartText)</button>*@
                   
                        <a value="@(addToCartText)" class="btn btn-primary btn btn-block lg flex-v @(Model.IsOutOfStock && Model.ManageInventoryMethod ? "bt-disabled" : "")" href="@producturl">@(addToCartText)</a>
                    
                   
                    <button type="button" value="@(addToCartText)" class="btn btn-outline-dark button-2 product-box-add-to-cart-button lg @(Model.IsOutOfStock && Model.ManageInventoryMethod ? "bt-disabled" : "")" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"><i></i></button>
                }
            </div>
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <div class="buttons add-to-compare cmp-sm">
                    <button type="button" value="@T("CompareProducts.AddToCompare")" class="btn btn-primary btn btn-block lg" onclick="fnCheckProductWhileAddToCompare(@(Model.Id),'@(addtocomparelink)'+'?isAddedFromPopup=true',event)">@T("CompareProducts.AddToCompare")</button>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
