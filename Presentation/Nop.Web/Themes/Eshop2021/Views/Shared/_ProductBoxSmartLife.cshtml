@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var buyNow = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = true });

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var taxTooltip = workContext.TaxDisplayType == TaxDisplayType.IncludingTax ? T("HomePage.ProductBox.IncludingTax") : T("HomePage.ProductBox.ExcludingTax");

    var producturl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }));
}
<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        <a href="@producturl" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details">
        <div class="prd-brand-name">
            
             @if (Model.SpecialPromotion)
        {
           <div class="div-SpecialPromotion"> <span>@Html.Raw(Model.SpecialPromotionDesc) </span></div> 
        }
        
          <div class="offerTitle">
        <a class="product-title" href="@producturl" title="@Model.Name">@Model.Name</a>    
        </div> 
        
        
        </div>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }

        <div class="description">
            @Html.Raw(Model.ShortDescription)
            @*<ol>
                    <li>1 Smart Cemara</li>
                    <li>Front end cemara</li>
                    <li>2500 Mha battery</li>
                    <li>255 Gb mega power</li>
                </ol>*@
        </div>

        <div class="view-and-compare">
            <a value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@producturl', event)"><span>@T("HomePage.ProductBox.ViewDetails")</span><i class="fas fa-chevron-right"></i></a>
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <a value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 compare-button" onclick="fnCheckProductWhileAddToCompare(@(Model.Id),'@(addtocomparelink)',event)"><span>@T("HomePage.Category.Compare")</span><i></i></a>
            }
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
        <div class="prices internetprices">
            <div class="prices-flex">
             @*   <div class="tooltip-check" data-toggle="tooltip" data-placement="bottom" title="@(taxTooltip)">
                </div>*@
                <div class="prices-group">
                   @* <div class="prices-list">
                        <span class="price actual-price">@Html.Raw(EShopHelper.GetPriceFormatting(Model.ProductPrice.Price))</span>
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Html.Raw(Model.ProductPrice.OldPrice)</span>
                        }
                    </div>*@


                     <div class="prices-list">
                        <div class="pricesection">
                      
                           <span class="price actual-price"> @Html.Raw(EShopHelper.GetPriceFormatting(Model.PriceWithoutDiscount)) </span> 
                        
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                <span class="price old-price">@Html.Raw(Model.ProductPrice.OldPrice) </span>
                            }
                           
                            </div>

                            <div class="price_with_tax">
                                @if (Model.TaxRate != 0)
                            {
                                     <div class="tooltip-check" data-toggle="tooltip" data-placement="bottom" title="@(taxTooltip)">
                                        </div>
                                <span>@T("homepage.productbox.withtax")</span>
                                  <span class="price">  @Html.Raw(Model.ProductPrice.Price)  </span> 
                            }
                    </div>
                    </div>

                </div>
            </div>
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons">
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.BuyNow").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    @*<button type="button" value="@(addToCartText)" class="btn btn-primary btn btn-block lg" onclick="setLocation('@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }))')">@(addToCartText)</button>*@
                    <a value="@(addToCartText)" class="btn btn-primary btn btn-block lg flex-v @(Model.IsOutOfStock && Model.ManageInventoryMethod ? "bt-disabled" : "")" href="@producturl">@(addToCartText)</a>
                    <button type="button" value="@(addToCartText)" class="btn btn-outline-dark button-2 product-box-add-to-cart-button lg @(Model.IsOutOfStock && Model.ManageInventoryMethod ? "bt-disabled" : "")" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"><i></i></button>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
