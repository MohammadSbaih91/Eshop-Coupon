@model ShoppingCartModel

@using Nop.Services.Catalog
@using Nop.Core
@using Nop.Services.Configuration;
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject ICategoryService categoryService
@inject ISettingService settingService
@inject IPackagesService packagesService
@inject IPriceFormatter priceFormatter
@inject IWorkContext workContext

@if (Model.Items != null && Model.Items.Count() > 0)
{
    var packageItem = Model.Items.Where(p => p.PackageId != 0).GroupBy(p => p.PackageId).ToList();
    var modelitem = Model.Items.Where(p => p.PackageId == 0);
    for (int i = 0; i < packageItem.Count; i++)
    {
        var products = packageItem[i];

        var firstProduct = products.FirstOrDefault();

        var package = packagesService.GetPackagesById(firstProduct.PackageId);
        var totalTaxValue = 0M;
        var taxModel = products.Where(p => p.TaxSplitInfo.IsTaxSpitEnable && !p.TaxSplitInfo.Is100PercentOff).ToList();

        @if (taxModel != null && taxModel.Count > 0)
        {
            @if (workContext.TaxDisplayType == TaxDisplayType.ExcludingTax)
            {
                totalTaxValue = taxModel.Sum(p => p.TaxSplitInfo.AmountWithTax);
            }
            @if (workContext.TaxDisplayType == TaxDisplayType.IncludingTax)
            {
                totalTaxValue = taxModel.Sum(p => p.TaxSplitInfo.AmountWithoutTax);
            }
        }
        var totalTax = priceFormatter.FormatPrice(totalTaxValue, true, false);
        var packageTotalValue = products.Sum(p => p.SubTotalValue);
        var packageTotal = priceFormatter.FormatPrice(packageTotalValue);
        var qty = firstProduct?.Quantity;
        var packageShoppingCartIds = string.Join(",", products.Select(x => x.Id));
        <div class="cart-bx">
            <div class="cart-flex">
                <div class="cart-bun package first">
                    <h2>
                        @package.Name
                    </h2>
                </div>
                <div class="cart-bun">
                    <div class="qty-count">
                        <span class="minus" onclick="IncDecQty('@packageShoppingCartIds', false,'#package@(firstProduct.Id)')"></span>
                        <input type="text" value="@(qty)" id="package@(firstProduct.Id)" onchange="updateQty('@packageShoppingCartIds','#package@(firstProduct.Id)')" name="package@(firstProduct.Id)" />
                        <span class="plus" onclick="IncDecQty('@packageShoppingCartIds', true,'#package@(firstProduct.Id)')"></span>
                    </div>
                </div>
                <div class="cart-bun tax">
                    @Html.Raw(totalTax)
                </div>
                <div class="cart-bun prices">
                    @Html.Raw(packageTotal)
                </div>
                <div class="cart-bun remove">
                    <i></i>
                </div>
            </div>
            @foreach (var item in products)
            {
                var iShowInterPlanMessage = false;
                var compareId = new List<int>();
                var categories = categoryService.GetProductCategoriesByProductId(item.ProductId);
                if (categories != null && categories.Count() > 0)
                {
                    var productCategoryIds = settingService.GetSettingByKey<string>(EShopHelper.ProductCategoryIds);
                    if (!string.IsNullOrEmpty(productCategoryIds))
                    {
                        List<int> catIds = productCategoryIds.Split(',').Select(Int32.Parse).ToList();
                        compareId = (from c in categories
                                     where catIds.Contains(c.CategoryId)
                                     select c.CategoryId).ToList();

                        iShowInterPlanMessage = compareId != null && compareId.Count > 0;
                    }
                }

                <div class="cart-flex">
                    <div class="cart-bun name first">
                        <a class="cart-pic" href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                        <div class="prd-details">
                            <div class="prd_title">
                                <a class="name" href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = item.ProductSeName }))" title="@item.ProductName">@item.ProductName</a>
                                @if (Model.IsEditable && item.AllowItemEditing)
                                {
                                    var editCartItemUrl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol));
                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                    <a class="link" href="@editCartItemUrl">@T("CartDrawer.Change")</a>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(item.AttributeInfo))
                            {
                                <span class="attributes">
                                    @Html.Raw(item.AttributeInfo)
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(item.SimCardNumber))
                            {
                                <span class="info-simcartnumber">
                                    @T("Checkout.SimCardnumber"):@Html.Raw(item.SimCardNumber)
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(item.RecurringInfo))
                            {
                                <span class="recurring-info">
                                    @Html.Raw(item.RecurringInfo)
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(item.RentalInfo))
                            {
                                <span class="rental-info">
                                    @Html.Raw(item.RentalInfo)
                                </span>
                            }
                            @if (item.Warnings.Count > 0)
                            {
                                <div class="message-error">
                                    <ul>
                                        @foreach (var warning in item.Warnings)
                                        {
                                            <li>@Html.Raw(warning)</li>
                                        }
                                    </ul>
                                </div>
                            }
                            @if (iShowInterPlanMessage)
                            {
                                <div>
                                    <span>@T("Checkout.InternetPlanInstallationMessage")</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="cart-bun">

                    </div>
                    <div class="cart-bun tax">
                        @await Html.PartialAsync("_TaxSplitInfo.Total", item.TaxSplitInfo)
                    </div>
                    <div class="cart-bun prices">
                        @*@Html.Raw(item.UnitPrice)*@
                    </div>
                    <div class="cart-bun remove">
                        @if (item.DisableRemoval)
                        {
                            <text>&nbsp;</text>
                        }
                        else
                        {
                            <i onclick="removeProductFromCart(@(item.Id))"></i>
                        }
                    </div>
                </div>
            }
        </div>
    }

    foreach (var item in modelitem)
    {
        var iShowInterPlanMessage = false;
        var compareId = new List<int>();
        var categories = categoryService.GetProductCategoriesByProductId(item.ProductId);
        if (categories != null && categories.Count() > 0)
        {
            var productCategoryIds = settingService.GetSettingByKey<string>(EShopHelper.ProductCategoryIds);
            if (!string.IsNullOrEmpty(productCategoryIds))
            {
                List<int> catIds = productCategoryIds.Split(',').Select(Int32.Parse).ToList();
                compareId = (from c in categories
                             where catIds.Contains(c.CategoryId)
                             select c.CategoryId).ToList();

                iShowInterPlanMessage = compareId != null && compareId.Count > 0;
            }
        }


        <div class="cart-bx">
            <div class="cart-flex">
                <div class="cart-bun name first">
                    @if (Model.ShowProductImages)
                    {
                        <a class="cart-pic" href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = item.ProductSeName }))">
                            <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                        </a>
                    }
                    <div class="prd-details">
                        <div class="prd_title">
                            <a class="name" href="@UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = item.ProductSeName }))">@item.ProductName</a>
                            @if (Model.IsEditable && item.AllowItemEditing)
                            {
                                var editCartItemUrl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol));
                                editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                <a class="link" href="@editCartItemUrl">@T("CartDrawer.Change")</a>
                            }
                        </div>
                        @*@if (item.Quantity > 0)
                        {
                            <span class="attributes">
                                @T("Order.Product(s).Quantity") : @item.Quantity
                            </span><br />
                        }*@
                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                        {
                            <span class="attributes">
                                @Html.Raw(item.AttributeInfo)
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(item.SimCardNumber))
                        {
                            <br />
                            <span class="info-simcartnumber">
                                @T("Checkout.SimCardnumber"): @Html.Raw(item.SimCardNumber)
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                        {
                            <span class="recurring-info">
                                @Html.Raw(item.RecurringInfo)
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                        {
                            <span class="rental-info">
                                @Html.Raw(item.RentalInfo)
                            </span>
                        }
                        @if (item.Warnings.Count > 0)
                        {
                            <div class="message-error">
                                <ul>
                                    @foreach (var warning in item.Warnings)
                                    {
                                        <li>@Html.Raw(warning)</li>
                                    }
                                </ul>
                            </div>
                        }
                        @if (iShowInterPlanMessage)
                        {
                            <div>
                                <span>@T("Checkout.InternetPlanInstallationMessage")</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="cart-bun">
                    @{
                        string strClass = "qty-count";
                        if (item.IsServiceProductAddedToCart)
                        {
                            strClass = "";
                        }
                    }
                    <div class="@(strClass)">
                        @if (Model.IsEditable)
                        {
                            if (item.IsServiceProductAddedToCart)
                            {
                                <strong>@item.Quantity</strong>

                            }
                            else if (item.AllowedQuantities.Count > 0)
                            {
                                <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown">
                                    @foreach (var qty in item.AllowedQuantities)
                                    {
                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <span class="minus" onclick="IncDecQty(@item.Id, false,'#itemquantity@(item.Id)')"></span>
                                <input onchange="updateQty('@item.Id','#itemquantity@(item.Id)')" name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" number-only value="@(item.Quantity)" />
                                <span class="plus" onclick="IncDecQty(@item.Id, true,'#itemquantity@(item.Id)')"></span>
                            }
                        }
                        else
                        {
                            @item.Quantity
                        }
                    </div>
                </div>
                <div class="cart-bun tax">
                    @{ item.TaxSplitInfo.Quantity = item.Quantity; }
                    @await Html.PartialAsync("_TaxSplitInfo.Total", item.TaxSplitInfo)
                </div>
                <div class="cart-bun prices">
                    @Html.Raw(EShopHelper.GetPriceFormatting(item.SubTotal))
                </div>
                <div class="cart-bun remove">
                    @if (item.DisableRemoval)
                    {
                        <text>&nbsp;</text>
                    }
                    else
                    {
                        <i onclick="removeProductFromCart(@(item.Id))"></i>
                    }
                </div>
            </div>
        </div>

    }
}
else
{
    @T("ShoppingCart.CartIsEmpty")
}

<script>
    function removeProductFromCart(shoppingCartId) {
        displayAjaxLoading(true);
        $.ajax({
            url: '/ShoppingCart/RemoveCartProduct',
            data: { shoppingCartId: shoppingCartId },
            type: 'POST',
            success: function (data) {
                $('.shopping-cart-listmodel').html(data.html);
                displayAjaxLoading(false);
            }
        });
    }

    function IncDecQty(shippingCartId, isInc, txtId) {
        var qty = Number($(txtId).val());
        if (isInc) {
            $(txtId).val(qty + 1);
        }
        else {
            if (qty <= 0) {
                $(txtId).val(0);
            }
            else {
                $(txtId).val(qty - 1);
            }
        }
        updateQty('' + shippingCartId + '', txtId);
    }

    function updateQty(shoppingCartId, txtId) {
        displayAjaxLoading(true);
        var ids = shoppingCartId.split(",").map(Number);
        var currentQty = $(txtId).val();
        $.ajax({
            url: '/ShoppingCart/UpdateQuantity',
            data: { updateCartids: ids, quantity: currentQty },
            type: 'POST',
            success: function (data) {
                $('.shopping-cart-listmodel').html(data.html);
                displayAjaxLoading(false);
            }
        });
    }

    function emptyBasket() {
        displayAjaxLoading(true);
        $.ajax({
            url: '/ShoppingCart/EmptyBasket',
            type: 'POST',
            success: function (data) {
                $('.shopping-cart-listmodel').html(data.html);
                //location.reload();
                displayAjaxLoading(false);
            }
        });
    }
</script>
