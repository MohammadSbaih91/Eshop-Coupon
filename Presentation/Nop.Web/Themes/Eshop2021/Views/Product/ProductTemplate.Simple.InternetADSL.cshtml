@model ProductDetailsModel
@using Nop.Core.Domain.Enum;
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@using Nop.Services.Helpers
@using Nop.Core
@using Nop.Services.Configuration;
@using Nop.Services
@inject IWorkContext workContext
@inject IUserAgentHelper userAgentHelper
@inject ISettingService settingService

@{
    Layout = "_ColumnsOne";

    var supportRtl = workContext.WorkingLanguage.Rtl;

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page html-common-details-page fiber-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = UrlStrucutre.UrlDecode(Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant());
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Model.Name + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Model.CurrentStoreName + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Model.CurrentStoreName + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Model.Name + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
    var monthlyPriceAttrId = settingService.GetSettingByKey<int>(EShopHelperService.MonthlyPriceAttribute);
    var attribute = Model.ProductAttributes.Where(p => p.ProductAttributeId == monthlyPriceAttrId).FirstOrDefault();
    var controlId = "";
    if (attribute != null)
    {
        controlId = $"product_attribute_{attribute.Id}";
    }
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page back-reapeat">
    <div class="page-body">
        <div class="container">
            <div class="breadcrumb-cmp-prd">
                <!--product breadcrumb-->
                @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
                @await Html.PartialAsync("_CompareProductsButton", Model)
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <input type="hidden" value="@EnumProductDetail.Yoline" id="hdnEnumProductDetail" name="enumProductDetail" />
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="container">
                        <div class="essential-group border-left4">
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforePictures, additionalData = Model })
                            <div class="overview overview-full-widht">
                                <div class="overview-inn with-picture">
                                    <div class="ovr-without-pic">
                                        <div class="ovr-left">
                                            <div class="for-mobile-view">
                                                <div class="product-name">
                                                    <h1 itemprop="name">
                                                        @Model.Name
                                                    </h1>
                                                </div>
                                            </div>
                                            <!--product pictures-->
                                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                                        </div>
                                        <div class="ovr-right">
                                            <div class="hide-mobile">
                                                <div class="product-name">
                                                    <h1 itemprop="name">
                                                        @Model.Name
                                                    </h1>
                                                </div>
                                            </div>
                                            <div class="desc-list-img">
                                                @Html.Raw(Model.FullDescription)
                                                @*<ol>
                                                        <li><img src="~/Themes/Eshop2021/Content/images/subtraction.png"/>Up to 24 Mbps</li>
                                                        <li><img src="~/Themes/Eshop2021/Content/images/subtraction.png" />Unlimited terabytes *</li>
                                                        <li><img src="~/Themes/Eshop2021/Content/images/subtraction.png" />Unlimited local & International calls *</li>
                                                    </ol>*@
                                            </div>
                                            <div class="clearfix"></div>
                                            <div class="fiber-attr half">
                                                @{
                                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                                    @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                                                }
                                            </div>
                                            <div class="clearfix"></div>
                                        </div>
                                    </div>
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                    <div class="essential-cart">
                        <div class="container">
                            <div class="essential-cart-flex">
                                <div class="essential-tab">
                                    <ul>
                                        <li class="active with-arrow wide"><span>@T("ProductDetail.Internet.FiberPlan")</span></li>
                                        <li><span>@T("ProductDetail.Internet.Accessories")</span></li>
                                    </ul>
                                </div>
                                <div class="essential-cart-right">
                                    <!--price & add to cart-->
                                    @{
                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                        @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                    }

                                    @{
                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    }
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)

                                    @*<a href="@Url.RouteUrl("ShoppingCart")" class="btn btn-orange">@T("ProductDetail.Checkout")</a>*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="container">
                        <div class="monthly-plan other">
                            <div class="monthly-plan-left">
                                <div class="cust-label">@T("ProductDetail.MonthlyPrices")</div>
                                <div class="monthly-plan-right">
                                    <div class="monthly-radio internet-adsl">
                                        @if (attribute != null)
                                        {
                                            if (attribute.Values != null && attribute.Values.Count > 0)
                                            {
                                                @foreach (var attributeValue in attribute.Values)
                                                {
                                                    var adjPrice = attributeValue.PriceAdjustment;
                                                    <div class="custom-control custom-radio custom-control-inline">
                                                        <input class="custom-control-input" id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                               @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null) />
                                                        <label class="custom-control-label" for="@(controlId)_@(attributeValue.Id)">
                                                            <span>@attributeValue.Name</span>
                                                            @if (!string.IsNullOrEmpty(attributeValue.PriceAdjustment))
                                                            {
                                                                adjPrice = attributeValue.PriceAdjustment.Replace("+", "").Replace("-", "");
                                                            }
                                                            <strong>@Html.Raw(adjPrice)</strong>
                                                        </label>
                                                    </div>
                                                }
                                            }
                                        }
                                    </div>
                                    @*<div class="monthly-price">
                                            <div class="monthly-price-info">
                                                <h3 id="monthlyPrice"></h3>
                                            </div>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="smart-tab">
                        <div class="container">
                            @await Html.PartialAsync("_ProductDetailTabs", Model)
                        </div>
                    </div>
                    <div class="container arrow-top-mobile">
                        @await Component.InvokeAsync("CustomRelatedProducts", new { productId = Model.Id, productName = Model.Name, enumProductDetail = EnumProductDetail.InternetFiber })
                    </div>
                    @await Html.PartialAsync("_OfferDetails", Model)
                    <div class="fiber-map">
                        <div class="container">
                            <div class="title">
                                <strong>@T("ProductDetail.Internet.Map.Coverage")</strong>
                                <h2>@T("ProductDetail.Internet.ADSL.Map.LocateADSL")</h2>
                            </div>
                            <iframe src="@T("Category.IFrame.Url")" width="1647" height="677" style="border:0;" allowfullscreen="" loading="lazy"></iframe>
                        </div>
                    </div>
                    @await Html.PartialAsync("_WhyChooseOrangeADSLInternet")
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
@await Html.PartialAsync("_CartDrawer")
