@model CheckoutCompletedModel

@using Nop.Core
@using Nop.Core.Configuration
@using System.Net
@using System.Net.Sockets;
@using Nop.Services.Logging;
@using Nop.Services.Orders;
@using Nop.Services.Payments;

@inject IWorkContext _workContext
@inject NopConfig _nopConfig
@inject ILogger _logger
@inject IOrderService orderService
@*@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor*@
@inject IJsonHelper Json
@inject IPaymentService paymentService
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-order-completed-page");

    var order = orderService.GetOrderById(Model.OrderId);

    //var ipa = "";
    //var host = Dns.GetHostEntry(Dns.GetHostName());
    //foreach (var ip in host.AddressList)
    //{
    //    if (ip.AddressFamily == AddressFamily.InterNetwork)
    //    {
    //        ipa = ip.ToString();
    //        break;
    //    }
    //}

    //var isOrangeEmployee = false;
    //var ipAddress = ipa;
    //string partial = ipAddress.Substring(0, ipAddress.LastIndexOf("."));
    //_logger.InsertLog(Nop.Core.Domain.Logging.LogLevel.Information, ipAddress);

    //if (_nopConfig.EmployeeIpList != null && _nopConfig.EmployeeIpList.Count() > 0)
    //{
    //    if (_nopConfig.EmployeeIpList.Contains(partial))
    //    {
    //        isOrangeEmployee = true;
    //    }
    //}
}

<script>
    $.getJSON("https://jsonip.com/", function (data) {
        var ipAddress = data.ip;
        var partial = ipAddress.substring(0, ipAddress.lastIndexOf("."));

        var accessIpList = @(Html.Raw(Json.Serialize(_nopConfig.EmployeeIpList)));

        if (accessIpList != null && accessIpList.length > 0)
        {
            if (accessIpList.includes(partial)) {
                $("#btnorangeemployee").show();
            }
            else {
                $("#btnorangeemployee").hide();
            }
        }
    });
</script>
<div class="page checkout-page order-completed-page">
    <div class="container">
        @if (!Model.OnePageCheckoutEnabled)
        {
            @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Complete })
        }
        <div class="page-body checkout-data">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedTop, additionalData = Model })
            <div class="section order-completed">
                <div class="details">
                    @if (Model.PaymentStatus == Nop.Core.Domain.Payments.PaymentStatus.Paid)
                    {
                        <h4>@T("Plugins.Payments.Eskadenia.PaymentStatus.Success")</h4>
                    }
                    else
                    {
                        var canRePostProcessPayment = paymentService.CanRePostProcessPayment(order);
                        if (canRePostProcessPayment)
                        {
                            <h4>@T("Plugins.Payments.Eskadenia.PaymentStatus.Fail")</h4>
                            <p>
                                <strong>@T("Order.RetryPayment.Hint")</strong>
                            </p>
                            @*<a href="@Url.RouteUrl("RetryPayment", new { orderId= Model.OrderId})" class="button-1 re-order-button">@T("Order.RetryPayment")</a>*@
                            <form asp-route="OrderDetails" method="post">
                                <input type="submit" name="repost-payment" value="@T("Order.RetryPayment")" class="btn btn-orange" />
                            </form>
                        }
                    }
                </div>
            </div>
            <div class="section order-completed">
                <div class="pick-row">
                    <div class="flex-left-start">
                        @if (order != null && order.PickUpInStore)
                        {
                            @await Component.InvokeAsync("CompleteTicket", new { orderId = Model.OrderId })
                        }
                        else
                        {
                            <div class="flex-left">
                                <h1>
                                    @T("Checkout.Order.completed.Title")
                                </h1>
                                <p>
                                    @*Your order number is <span>{0}.</span> Now you can start tracking your order or you can check and print the summary.*@
                                    @{
                                        var info = T("Checkout.Order.completed.Title.info").ToString();
                                        info = string.Format(info, Model.OrderId.ToString());
                                    }
                                    @Html.Raw(info)
                                </p>
                                <div class="row">
                                    <div class="col-6">
                                        <a class="btn btn-orange btn-block" href="@Url.RouteUrl("AramexOrderTracking", new { id = Model.OrderId })">@T("Checkout.TrackyourOrder")</a>
                                    </div>
                                    <div class="col-6">
                                        <a class="btn btn-outline-dark btn-block" href="@Url.RouteUrl("OrderDetails", new { orderID = Model.OrderId })">@T("Breadcrumb.OrderSummary")</a>
                                    </div>
                                </div>
                            </div>
                            <div class="scooter-img booked-scooter-img">
                                <img src="~/Themes/Eshop2021/Content/images/scooter.png" />
                            </div>
                            <div id="btnorangeemployee" class="employeedetail" style="display:none;">
                                <a class="btn btn-orange btn-block" href="@Url.RouteUrl("EmployeeDetail", new { orderId = Model.OrderId })">@T("Checkout.EmployeeDetail")</a>
                            </div>

                        }
                    </div>
                    <div class="flex-left-end">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutCompletedBottom, additionalData = Model })
                    </div>
                </div>

                @*@if (Model.PaymentStatus == Nop.Core.Domain.Payments.PaymentStatus.Paid)
                    {
                    <div class="title">
                    <strong>@T("Checkout.YourOrderHasBeenSuccessfullyProcessed")</strong>
                    </div>
                    <div class="details">
                    <div class="order-number">
                    <strong>@T("Checkout.OrderNumber"): @Model.CustomOrderNumber</strong>
                    </div>
                    </div>
                    }*@
                <div class="details" style="display:none;">
                    <div class="details-link">
                        <a href="@Url.RouteUrl("OrderDetails", new { orderID = Model.OrderId })">@T("Checkout.PlacedOrderDetails")</a>
                    </div>

                    <div class="buttons">
                        <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")', event)" />
                    </div>

                    @*@if (isOrangeEmployee)
                        {
                        <div class="buttons">
                        <a class="button-1 order-completed-continue-button" style="color:#fff !important;" href="@Url.RouteUrl("EmployeeDetail", new { orderId = Model.OrderId })">@T("Checkout.EmployeeDetail")</a>
                        </div>
                        }*@
                    <div id="btnorangeemployee" class="buttons" style="display:none;">
                        <a class="button-1 order-completed-continue-button" style="color:#fff !important;" href="@Url.RouteUrl("EmployeeDetail", new { orderId = Model.OrderId })">@T("Checkout.EmployeeDetail")</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
